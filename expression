
package edu.njit.cs114;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.*;

/**
 * Author: Ravi Varadarajan
 * Date created: 10/13/20
 */
public class ExpressionEvaluator {

    // Complete this function which can be called by postfixEval()
    private static double applyOp(OperatorToken opType, double op1, double op2) {
        if(opType==OperatorToken.ADD){
            return op1+op2;
        }
       else if(opType==OperatorToken.SUBTRACT){
            return op1-op2;
        }
       else if(opType==OperatorToken.MULTIPLY){
           return op1*op2;
        }
       else if(opType==OperatorToken.DIVIDE){
           return op1/op2;

        }
       else if(opType==OperatorToken.EXP){
           return Math.pow(op1,op2);
        }


        return 0.0;
    }

    /**
     * Parse an expression into a list of operator and operand tokens
     * @param str
     * @return
     */
    public static List<ExpressionToken> parseExpr(String str) {
        List<ExpressionToken> expr = new ArrayList<>();
        String [] strTokList = str.split("\\s+");
        for (String strTok : strTokList) {
            String str1 = strTok.trim();
            if (str1.isEmpty()) {
                continue;
            }
            OperatorToken operToken = OperatorToken.opType(str1);
            expr.add(operToken == null ? new OperandToken(str1) : operToken);
        }
        return expr;
    }

    /**
     * Convert Infix expression given as a list of operator and operand tokens to
     * a postfix expression as a list of operator and operand tokens
     * @param infixExpr
     * @return
     * @throws Exception when the expression is not valid
     *    such as insufficient number of operators or operands e.g. 4 * 2 5, 4 * 2 +
     *    or not having balanced parentheses e.g. (4 * ( 5 + 3 )
     */
    public static List<ExpressionToken> convertToPostFix(List<ExpressionToken> infixExpr) throws Exception {
        /**
         * Complete the code here only for homework.
         * After completing the code here, remove the following return statement
         */
        List<ExpressionToken> res= new ArrayList<ExpressionToken>();
        Stack<OperatorToken> stack= new Stack<OperatorToken>();
        for(ExpressionToken token: infixExpr){
            //if token is an operand, immediately push it into the stack.
            if(token instanceof OperandToken){
                res.add(token);
            }
            else{
                OperatorToken tok=(OperatorToken)token;
                //If precedence of current operator is greater than the top operator, the stack is empty, or is an open parenthesis immediately push to stack.
                if(tok==OperatorToken.OPENPAR||stack.isEmpty()||tok!=OperatorToken.CLOSEDPAR&&stack.peek().precedence<tok.precedence){
                    if(tok!=OperatorToken.CLOSEDPAR) {
                        stack.push(tok);
                    }
                }
                //if closed parenthesis then pop and insert into list until you are getting open parenthesis. pop opening parenthesis after.
                 else if(tok==OperatorToken.CLOSEDPAR){
                     while(!stack.isEmpty()&&stack.peek()!=OperatorToken.OPENPAR){
                         res.add(stack.pop());
                     }
                     if(!stack.isEmpty()&&stack.peek()!=OperatorToken.OPENPAR){
                         throw new Exception();
                     }

                     else {
                         if(stack.isEmpty()){
                             throw new Exception("Parenthesis not balanced");
                         }
                         stack.pop();
                     }
                     continue;
                }
                 else {
                     //while the stack is not empty and the top of the stack has higher/equal precedence than current token, pop and add to the list.
                    //stop popping when you get to an open parenthesis.

                    while (!stack.isEmpty() && stack.peek().precedence >= tok.precedence && stack.peek() != OperatorToken.OPENPAR) {
                        res.add(stack.pop());
                    }
                    stack.push(tok);
                }


            }
        }
        while(!stack.isEmpty()){
            if(stack.peek()==OperatorToken.OPENPAR){
                throw new Exception("Invalid Parenthesis");
            }

            res.add(stack.pop());
        }
        return res;


    }

    /**
     * Evaluate post fix expression given as a list of operator and operand tokens
     * and return the result
     * @param postfixExpr
     * @return
     * @throws Exception when the expression is not valid
     *      such as insufficient number of operators or operands e.g. 4 5 2 *, 4 *
     */
    public static double postFixEval(List<ExpressionToken> postfixExpr) throws Exception {
        /**
         * Complete this code for lab
         * After completing the code here, remove the following return statement
         */
        //COMMENT: USES STACK TO KEEP TRACK OF NUMBERS AND POPS 2 ELEMENTS TO DO CALCULATION EVERY TIME A OPERATOR IS ENCOUNTERED.
        Stack<Double> stack= new Stack<Double>();
        for(ExpressionToken token: postfixExpr){
            if(token instanceof OperandToken){
                OperandToken tok= (OperandToken)token;
                stack.push(tok.getValue());
            }
            else{
                OperatorToken tok=(OperatorToken)token;
                if(stack.isEmpty()){
                    throw new Exception("Insufficient number of operands in post fix expression "+Arrays.toString(printArray(postfixExpr)));
                }
                double value2=stack.pop();
                if(stack.isEmpty()){
                    throw new Exception("Insufficient number of operands in post fix expression "+Arrays.toString(printArray(postfixExpr)));
                }
                double value1=stack.pop();
                double result=applyOp(tok,value1,value2);
                stack.push(result);
            }
        }
        double answer=stack.pop();
        if(!stack.isEmpty()){
            throw new Exception("Insufficient number of operators in post fix expression "+Arrays.toString(printArray(postfixExpr)));
        }

        return answer;
    }
    public static String[] printArray(List<ExpressionToken> res){
        String[] ans= new String[res.size()];
        int index=0;
        for(ExpressionToken token:res){
            if(token instanceof OperandToken){
                OperandToken op=(OperandToken)token;
                ans[index++]=op.toString();
            }
            else{
                OperatorToken op=(OperatorToken)token;
                ans[index++]=op.toString();
            }

        }
        return ans;
    }


    /**
     * Evaluate an infix expression string using postfix
     * @param str
     * @return
     * @throws Exception when the expression is not valid (e.g 2 + 3 5)
     */
    public static double eval(String str) throws Exception {
        return postFixEval(convertToPostFix(parseExpr(str)));
    }

    /**
     * Evaluate an infix expression string directly
     * @param str
     * @return
     * @throws Exception
     */
    public static double evalDirect(String str) throws Exception {
        List<ExpressionToken> tokens = parseExpr(str);
        /**
         * For homework extra credit only!!
         */
        Stack<Double> operandStack= new Stack<Double>();
        Stack<OperatorToken> operatorStack= new Stack<OperatorToken>();
        for(ExpressionToken token: tokens){
            if(token instanceof OperandToken){
                OperandToken tok=(OperandToken)token;
                operandStack.push(tok.getValue());
            }
            else{
                OperatorToken tok= (OperatorToken)token;
                if(tok==OperatorToken.OPENPAR||operatorStack.isEmpty()||tok!=OperatorToken.CLOSEDPAR&&tok.precedence>operatorStack.peek().precedence){
                    if(tok!=OperatorToken.CLOSEDPAR) {
                        operatorStack.push(tok);
                    }
                }
                else if(tok==OperatorToken.CLOSEDPAR){
                    while(operatorStack.peek()!=OperatorToken.OPENPAR){
                        double num2=operandStack.pop();
                        double num1= operandStack.pop();
                        OperatorToken op=operatorStack.pop();
                        double result=applyOp(op,num1,num2);
                        operandStack.push(result);

                    }
                    if(operatorStack.peek()==OperatorToken.OPENPAR){
                        operatorStack.pop();
                    }
                }
                else{
                    while(!operatorStack.isEmpty()&&tok.precedence<=operatorStack.peek().precedence&&operatorStack.peek()!=OperatorToken.OPENPAR){
                        double num2=operandStack.pop();
                        double num1= operandStack.pop();
                        OperatorToken op=operatorStack.pop();
                        double result=applyOp(op,num1,num2);
                        operandStack.push(result);

                    }
                    operatorStack.push(tok);
                }

            }
        }
        while(!operatorStack.isEmpty()){
            double num2=operandStack.pop();
            double num1= operandStack.pop();
            OperatorToken op=operatorStack.pop();
            double result=applyOp(op,num1,num2);
            operandStack.push(result);

        }
        double ans=operandStack.pop();
        return ans;
    }

    public static void main(String [] args) throws Exception {
        /** Uncomment commented lines below after you have finished the homework implementations **/
          System.out.println(String.format("expr. %s evaluated as %.4f", "( 8 - 6 ) * ( 6 / 2 ) + 3",
                eval("( 8 - 6 ) * ( 6 / 2 ) + 3")));
       System.out.println(String.format("postfix notation for %s : %s", "-6.5",
               convertToPostFix(parseExpr("-6.5"))));
        double result = postFixEval(parseExpr("-6.5"));
        System.out.println(String.format("postfix expr. %s evaluated as %.4f", "-6.5",
                result));
        assert Math.abs(result-(-6.5)) <= 0.00001;
       System.out.println(String.format("%s evaluated as %.4f", "-6.5",
               eval("-6.5")));
        System.out.println(String.format("postfix notation for %s : %s", " 5 * -2",
               convertToPostFix(parseExpr(" 5 * -2"))));
        result = postFixEval(parseExpr(" 5 -2 *"));
        System.out.println(String.format("postfix expr. %s evaluated as %.4f", " 5 -2 *",
                result));
        assert Math.abs(result-(-10.0)) <= 0.00001;
        System.out.println(String.format("%s evaluated as %.4f", " 5 * -2",
                eval(" 5 * -2")));
        System.out.println(String.format("postfix notation for %s : %s", "( 4 + -2 ) * 7",
                convertToPostFix(parseExpr("( 4 + -2 ) * 7"))));
        System.out.println(String.format("%s evaluated as %.4f", "( 4 + -2 ) * 7",
               eval("( 4 + -2 ) * 7")));
    //    System.out.println(String.format("postfix notation for %s : %s", " 4 * ( 3 - 2 ) ) ** -2 ",
      //         convertToPostFix(parseExpr("  4 * ( 3 - 2 ) ) ** -2 "))));
      // System.out.println(String.format("%s evaluated as %.4f", " 4 * ( 3 - 2 ) ) ** -2",
       //         eval(" 4 * ( 3 - 2 ) ) ** -2")));
        try {
        System.out.println(String.format("postfix notation for %s : %s",
                " ( ( 1.5 + 2.1 ) ** 2  - 7 ) * -1.4",
               convertToPostFix(parseExpr(" 4 * ( 3 - 2 ) ) ** -2 "))));
        }
        catch(Exception E){
            System.out.println(E.getMessage());
            assert true;
        }
        result = postFixEval(parseExpr("1.5 2.1 + 2 ** 7 - -1.4 *"));
        System.out.println(String.format("postfix expr. %s evaluated as %.4f",
                "1.5 2.1 + 2 ** 7 - -1.4 *", result));
        assert Math.abs(result-(-8.344)) <= 0.00001;
        System.out.println(String.format("%s evaluated as %.4f",
                " ( ( 1.5 + 2.1 ) ** 2  - 7 ) * -1.4",
               eval(" ( ( 1.5 + 2.1 ) ** 2  - 7 ) * -1.4")));
        result = postFixEval(parseExpr("4 -2 7 * +"));
        System.out.println(String.format("postfix expr. %s evaluated as %.4f", "4 -2 7 * +",
                result));
        assert Math.abs(result-(-10.0)) <= 0.00001;
        result = postFixEval(parseExpr("3.5 2 3 + /"));
        System.out.println(String.format("postfix expr. %s evaluated as %.4f", "3.5 2 3 + /",
                result));
        assert Math.abs(result-(0.7)) <= 0.00001;
        System.out.println(String.format("%s evaluated as %.4f", "3.5 / ( 2 + 3 )",
               eval("3.5 / ( 2 + 3 )")));
       System.out.println(String.format("postfix notation for %s : %s", "2 ** 3 ** 2",
               convertToPostFix(parseExpr("2 ** 3 ** 2"))));
        System.out.println(String.format("%s evaluated as %.4f", "2 ** 3 ** 2",
                eval("2 ** 3 ** 2")));
        try {
            System.out.println(String.format("postfix expr. %s evaluated as %.4f", "2 2.5 + 3 4 *",
                    postFixEval(parseExpr("2 2.5 + 3 4 *"))));
            assert false;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            assert true;
        }
        try {
            System.out.println(String.format("postfix expr. %s evaluated as %.4f", "2 5 * + ",
                    postFixEval(parseExpr("2 5 * + "))));
            assert false;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            assert true;
        }
    }

}
